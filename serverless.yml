# serverless.yml
service: image-crawler

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  timeout: 900  # 15 minutes for long-running crawls
  memorySize: 1024
  
  environment:
    S3_BUCKET: ${self:custom.bucketName}
    FIRECRAWL_API_KEY: ${env:FIRECRAWL_API_KEY}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    DEPLOYMENT_VERSION: ${env:GITHUB_SHA, 'local'}
  
  iam:
    role:
      statements:
        # S3 permissions
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource: 
            - "arn:aws:s3:::${self:custom.bucketName}/*"
        # Lambda invoke permissions for async calls
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-crawler"
        # CloudWatch logs
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

custom:
  bucketName: ${self:service}-${sls:stage}-images
  
  # Webpack configuration
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'

functions:
  crawler:
    handler: src/handlers/index.handler
    description: "Async image crawler with webhook support"
    
    # HTTP endpoint for direct invocation (optional)
    events:
      - httpApi:
          path: /crawl
          method: post
          cors: true
    
    # Dead letter queue for failed async invocations
    deadLetter:
      targetArn: !GetAtt CrawlerDLQ.Arn
    
    # Async invocation configuration
    maximumEventAge: 21600  # 6 hours
    maximumRetryAttempts: 2
    
    # Reserved concurrency to prevent overwhelming external APIs
    reservedConcurrency: 10

resources:
  Resources:
    # S3 bucket for storing processed images
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        
    # Bucket policy to make images publicly readable
    ImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagesBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Sub '${ImagesBucket}/*'
    
    # Dead letter queue for failed async invocations
    CrawlerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-dlq
        MessageRetentionPeriod: 1209600  # 14 days

    # Optional: CloudWatch alarm for DLQ messages
    DLQAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-dlq-messages
        AlarmDescription: "Alert when messages appear in DLQ"
        MetricName: ApproximateNumberOfVisibleMessages
        Namespace: AWS/SQS
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt CrawlerDLQ.QueueName

  Outputs:
    # Function ARN for async invocation
    CrawlerFunctionArn:
      Description: "ARN of the crawler Lambda function"
      Value: !GetAtt CrawlerLambdaFunction.Arn
      Export:
        Name: ${self:service}-${sls:stage}-function-arn
    
    # API Gateway URL
    CrawlerApiUrl:
      Description: "HTTP API endpoint URL"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Export:
        Name: ${self:service}-${sls:stage}-api-url
    
    # S3 bucket name
    ImagesBucketName:
      Description: "S3 bucket for processed images"
      Value: !Ref ImagesBucket
      Export:
        Name: ${self:service}-${sls:stage}-bucket-name

plugins:
  - serverless-webpack
  - serverless-offline
